(function() {var implementors = {};
implementors["criterion"] = [{"text":"impl&lt;'a, M&gt; !RefUnwindSafe for BenchmarkGroup&lt;'a, M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchmarkId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuturesExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SmolExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AsyncStdExecutor","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; RefUnwindSafe for Bencher&lt;'a, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Measurement&gt;::Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, A, M&gt; RefUnwindSafe for AsyncBencher&lt;'a, 'b, A, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Measurement&gt;::Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WallTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternalProfiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Baseline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlottingBackend","synthetic":true,"types":[]},{"text":"impl&lt;M&nbsp;=&nbsp;WallTime&gt; !RefUnwindSafe for Criterion&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Throughput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AxisScale","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlotConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SamplingMode","synthetic":true,"types":[]}];
implementors["criterion_plot"] = [{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl&lt;X, WM, BM, BH, WH&gt; RefUnwindSafe for Candlesticks&lt;X, WM, BM, BH, WH&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BH: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BM: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;WH: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;WM: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl&lt;X, Y&gt; RefUnwindSafe for Curve&lt;X, Y&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Y: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl&lt;X, Y, L, H&gt; RefUnwindSafe for ErrorBar&lt;X, Y, L, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Y: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl&lt;X, Y1, Y2&gt; RefUnwindSafe for FilledCurve&lt;X, Y1, Y2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Y1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Y2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Boxed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Horizontal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Justification","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Order","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stacked","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vertical","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Figure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoxWidth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Font","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineWidth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Opacity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl&lt;P, L&gt; RefUnwindSafe for TicLabels&lt;P, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Title","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scale","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScaleFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Terminal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VersionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()